// ts는 js가 가지지 못하는 제네릭이라는 기능을 제공함
// 제네릭은 c#과 같은 일반적인 프로그래밍 언어에서 제공해주는 기능
// Cup<T>  <-T는 모든타입(Any type), 컵이라는 이름의 클래스상 T에 juice 타입이 들어오면 오렌지 주스컵이되고, coffee 타입이 들어오면 커피 컵이 됨
// 즉, 넘겨주는 타입에 따라서 컵의 특징이 결정됨 -> 이것이 제네릭

// 제네릭은 재사용성을 띔
// Cup<T> => 넘겨주는 타입에 따라 타입의 형태가 결정됨 (재사용성을 강조)

// 일반적으로 제네릭 클래스 레벨로 구현함

// 제네릭 클래스 내에 함수를 가짐 (넘겨주는 타입의 형태에 따라 결정)

// 타입 체킹 및 제약조건 부여
// 제네릭은 모든 타입이 들어오므로 모든 타입이 어떤 속성들을 가지고 있는지 모른다. 따라서 그 내부에서 어떤 타입이 들어오기는 하지만, 어떤 타입이 들어왔으면 좋겠다. 와 같은 제약을 건다.

// Cup<T> => T는 모든 타입이면서 Name이라는 이름의 속성과 Price라는 속성이 왔으면 좋겠다 (이들이 오면 받아들이겠다)하는 제약조건을 걸 수 있다.

/* 1) 제네릭 사용 전 => 각각의 스타일대로 구현 */
class AccountString {
  tag: string; // 태그라는 속성의 string값을 받음
}
var as = new AccountString();
as.tag = "문자열만"; // (1234; => 숫자값이 들어오면 에러)

class AccountNumber {
  tag: number;
}
var an = new AccountNumber(); // 인스턴스 생성
an.tag = 1234; // ("안녕"; => 문자열이 들어오면 에러)
// 타입별로 따로따로 개발해야하므로 불편
